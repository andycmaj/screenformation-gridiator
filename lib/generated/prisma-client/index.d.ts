// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  content: (where?: ContentWhereInput) => Promise<boolean>;
  pane: (where?: PaneWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  viewer: (where?: ViewerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  content: (where: ContentWhereUniqueInput) => ContentPromise;
  contents: (
    args?: {
      where?: ContentWhereInput;
      orderBy?: ContentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Content>;
  contentsConnection: (
    args?: {
      where?: ContentWhereInput;
      orderBy?: ContentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ContentConnectionPromise;
  pane: (where: PaneWhereUniqueInput) => PanePromise;
  panes: (
    args?: {
      where?: PaneWhereInput;
      orderBy?: PaneOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Pane>;
  panesConnection: (
    args?: {
      where?: PaneWhereInput;
      orderBy?: PaneOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PaneConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  viewer: (where: ViewerWhereUniqueInput) => ViewerPromise;
  viewers: (
    args?: {
      where?: ViewerWhereInput;
      orderBy?: ViewerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Viewer>;
  viewersConnection: (
    args?: {
      where?: ViewerWhereInput;
      orderBy?: ViewerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ViewerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContent: (data: ContentCreateInput) => ContentPromise;
  updateContent: (
    args: { data: ContentUpdateInput; where: ContentWhereUniqueInput }
  ) => ContentPromise;
  updateManyContents: (
    args: { data: ContentUpdateManyMutationInput; where?: ContentWhereInput }
  ) => BatchPayloadPromise;
  upsertContent: (
    args: {
      where: ContentWhereUniqueInput;
      create: ContentCreateInput;
      update: ContentUpdateInput;
    }
  ) => ContentPromise;
  deleteContent: (where: ContentWhereUniqueInput) => ContentPromise;
  deleteManyContents: (where?: ContentWhereInput) => BatchPayloadPromise;
  createPane: (data: PaneCreateInput) => PanePromise;
  updatePane: (
    args: { data: PaneUpdateInput; where: PaneWhereUniqueInput }
  ) => PanePromise;
  updateManyPanes: (
    args: { data: PaneUpdateManyMutationInput; where?: PaneWhereInput }
  ) => BatchPayloadPromise;
  upsertPane: (
    args: {
      where: PaneWhereUniqueInput;
      create: PaneCreateInput;
      update: PaneUpdateInput;
    }
  ) => PanePromise;
  deletePane: (where: PaneWhereUniqueInput) => PanePromise;
  deleteManyPanes: (where?: PaneWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createViewer: (data: ViewerCreateInput) => ViewerPromise;
  updateViewer: (
    args: { data: ViewerUpdateInput; where: ViewerWhereUniqueInput }
  ) => ViewerPromise;
  updateManyViewers: (
    args: { data: ViewerUpdateManyMutationInput; where?: ViewerWhereInput }
  ) => BatchPayloadPromise;
  upsertViewer: (
    args: {
      where: ViewerWhereUniqueInput;
      create: ViewerCreateInput;
      update: ViewerUpdateInput;
    }
  ) => ViewerPromise;
  deleteViewer: (where: ViewerWhereUniqueInput) => ViewerPromise;
  deleteManyViewers: (where?: ViewerWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  content: (
    where?: ContentSubscriptionWhereInput
  ) => ContentSubscriptionPayloadSubscription;
  pane: (
    where?: PaneSubscriptionWhereInput
  ) => PaneSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  viewer: (
    where?: ViewerSubscriptionWhereInput
  ) => ViewerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PaneOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rowStart_ASC"
  | "rowStart_DESC"
  | "rowSpan_ASC"
  | "rowSpan_DESC"
  | "colStart_ASC"
  | "colStart_DESC"
  | "colSpan_ASC"
  | "colSpan_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ContentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ViewerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "rowCount_ASC"
  | "rowCount_DESC"
  | "colCount_ASC"
  | "colCount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ViewerCreateOneWithoutActivePanesInput {
  create?: ViewerCreateWithoutActivePanesInput;
  connect?: ViewerWhereUniqueInput;
}

export type ContentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  title?: String;
}>;

export interface PaneUpdateManyWithoutViewerInput {
  create?: PaneCreateWithoutViewerInput[] | PaneCreateWithoutViewerInput;
  delete?: PaneWhereUniqueInput[] | PaneWhereUniqueInput;
  connect?: PaneWhereUniqueInput[] | PaneWhereUniqueInput;
  set?: PaneWhereUniqueInput[] | PaneWhereUniqueInput;
  disconnect?: PaneWhereUniqueInput[] | PaneWhereUniqueInput;
  update?:
    | PaneUpdateWithWhereUniqueWithoutViewerInput[]
    | PaneUpdateWithWhereUniqueWithoutViewerInput;
  upsert?:
    | PaneUpsertWithWhereUniqueWithoutViewerInput[]
    | PaneUpsertWithWhereUniqueWithoutViewerInput;
  deleteMany?: PaneScalarWhereInput[] | PaneScalarWhereInput;
  updateMany?:
    | PaneUpdateManyWithWhereNestedInput[]
    | PaneUpdateManyWithWhereNestedInput;
}

export interface ViewerCreateOneInput {
  create?: ViewerCreateInput;
  connect?: ViewerWhereUniqueInput;
}

export interface ViewerUpdateDataInput {
  name?: String;
  rowCount?: Int;
  colCount?: Int;
  activePanes?: PaneUpdateManyWithoutViewerInput;
}

export interface ContentUpdateDataInput {
  title?: String;
  url?: String;
}

export interface ViewerUpdateOneInput {
  create?: ViewerCreateInput;
  update?: ViewerUpdateDataInput;
  upsert?: ViewerUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ViewerWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export type PaneWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ViewerUpdateManyMutationInput {
  name?: String;
  rowCount?: Int;
  colCount?: Int;
}

export interface ContentCreateInput {
  title: String;
  url?: String;
}

export interface ViewerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  rowCount?: Int;
  rowCount_not?: Int;
  rowCount_in?: Int[] | Int;
  rowCount_not_in?: Int[] | Int;
  rowCount_lt?: Int;
  rowCount_lte?: Int;
  rowCount_gt?: Int;
  rowCount_gte?: Int;
  colCount?: Int;
  colCount_not?: Int;
  colCount_in?: Int[] | Int;
  colCount_not_in?: Int[] | Int;
  colCount_lt?: Int;
  colCount_lte?: Int;
  colCount_gt?: Int;
  colCount_gte?: Int;
  activePanes_every?: PaneWhereInput;
  activePanes_some?: PaneWhereInput;
  activePanes_none?: PaneWhereInput;
  AND?: ViewerWhereInput[] | ViewerWhereInput;
  OR?: ViewerWhereInput[] | ViewerWhereInput;
  NOT?: ViewerWhereInput[] | ViewerWhereInput;
}

export interface ContentUpdateInput {
  title?: String;
  url?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
}

export interface ContentUpdateManyMutationInput {
  title?: String;
  url?: String;
}

export interface PaneUpdateManyDataInput {
  rowStart?: Int;
  rowSpan?: Int;
  colStart?: Int;
  colSpan?: Int;
}

export interface UserUpdateInput {
  name?: String;
  viewer?: ViewerUpdateOneInput;
}

export interface PaneUpdateManyWithWhereNestedInput {
  where: PaneScalarWhereInput;
  data: PaneUpdateManyDataInput;
}

export interface PaneCreateWithoutViewerInput {
  rowStart: Int;
  rowSpan: Int;
  colStart: Int;
  colSpan: Int;
  content?: ContentCreateOneInput;
}

export interface ContentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: ContentWhereInput[] | ContentWhereInput;
  OR?: ContentWhereInput[] | ContentWhereInput;
  NOT?: ContentWhereInput[] | ContentWhereInput;
}

export interface PaneCreateInput {
  rowStart: Int;
  rowSpan: Int;
  colStart: Int;
  colSpan: Int;
  content?: ContentCreateOneInput;
  viewer: ViewerCreateOneWithoutActivePanesInput;
}

export interface PaneUpsertWithWhereUniqueWithoutViewerInput {
  where: PaneWhereUniqueInput;
  update: PaneUpdateWithoutViewerDataInput;
  create: PaneCreateWithoutViewerInput;
}

export interface ContentCreateOneInput {
  create?: ContentCreateInput;
  connect?: ContentWhereUniqueInput;
}

export type ViewerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface PaneCreateManyWithoutViewerInput {
  create?: PaneCreateWithoutViewerInput[] | PaneCreateWithoutViewerInput;
  connect?: PaneWhereUniqueInput[] | PaneWhereUniqueInput;
}

export interface ViewerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ViewerWhereInput;
  AND?: ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput;
  OR?: ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput;
  NOT?: ViewerSubscriptionWhereInput[] | ViewerSubscriptionWhereInput;
}

export interface ViewerCreateWithoutActivePanesInput {
  name: String;
  rowCount: Int;
  colCount: Int;
}

export interface ContentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ContentWhereInput;
  AND?: ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput;
  OR?: ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput;
  NOT?: ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput;
}

export interface PaneUpdateInput {
  rowStart?: Int;
  rowSpan?: Int;
  colStart?: Int;
  colSpan?: Int;
  content?: ContentUpdateOneInput;
  viewer?: ViewerUpdateOneRequiredWithoutActivePanesInput;
}

export interface ViewerUpdateInput {
  name?: String;
  rowCount?: Int;
  colCount?: Int;
  activePanes?: PaneUpdateManyWithoutViewerInput;
}

export interface ContentUpdateOneInput {
  create?: ContentCreateInput;
  update?: ContentUpdateDataInput;
  upsert?: ContentUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ContentWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ViewerCreateInput {
  name: String;
  rowCount: Int;
  colCount: Int;
  activePanes?: PaneCreateManyWithoutViewerInput;
}

export interface PaneScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rowStart?: Int;
  rowStart_not?: Int;
  rowStart_in?: Int[] | Int;
  rowStart_not_in?: Int[] | Int;
  rowStart_lt?: Int;
  rowStart_lte?: Int;
  rowStart_gt?: Int;
  rowStart_gte?: Int;
  rowSpan?: Int;
  rowSpan_not?: Int;
  rowSpan_in?: Int[] | Int;
  rowSpan_not_in?: Int[] | Int;
  rowSpan_lt?: Int;
  rowSpan_lte?: Int;
  rowSpan_gt?: Int;
  rowSpan_gte?: Int;
  colStart?: Int;
  colStart_not?: Int;
  colStart_in?: Int[] | Int;
  colStart_not_in?: Int[] | Int;
  colStart_lt?: Int;
  colStart_lte?: Int;
  colStart_gt?: Int;
  colStart_gte?: Int;
  colSpan?: Int;
  colSpan_not?: Int;
  colSpan_in?: Int[] | Int;
  colSpan_not_in?: Int[] | Int;
  colSpan_lt?: Int;
  colSpan_lte?: Int;
  colSpan_gt?: Int;
  colSpan_gte?: Int;
  AND?: PaneScalarWhereInput[] | PaneScalarWhereInput;
  OR?: PaneScalarWhereInput[] | PaneScalarWhereInput;
  NOT?: PaneScalarWhereInput[] | PaneScalarWhereInput;
}

export interface ContentUpsertNestedInput {
  update: ContentUpdateDataInput;
  create: ContentCreateInput;
}

export interface PaneUpdateWithWhereUniqueWithoutViewerInput {
  where: PaneWhereUniqueInput;
  data: PaneUpdateWithoutViewerDataInput;
}

export interface ViewerUpdateOneRequiredWithoutActivePanesInput {
  create?: ViewerCreateWithoutActivePanesInput;
  update?: ViewerUpdateWithoutActivePanesDataInput;
  upsert?: ViewerUpsertWithoutActivePanesInput;
  connect?: ViewerWhereUniqueInput;
}

export interface PaneWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rowStart?: Int;
  rowStart_not?: Int;
  rowStart_in?: Int[] | Int;
  rowStart_not_in?: Int[] | Int;
  rowStart_lt?: Int;
  rowStart_lte?: Int;
  rowStart_gt?: Int;
  rowStart_gte?: Int;
  rowSpan?: Int;
  rowSpan_not?: Int;
  rowSpan_in?: Int[] | Int;
  rowSpan_not_in?: Int[] | Int;
  rowSpan_lt?: Int;
  rowSpan_lte?: Int;
  rowSpan_gt?: Int;
  rowSpan_gte?: Int;
  colStart?: Int;
  colStart_not?: Int;
  colStart_in?: Int[] | Int;
  colStart_not_in?: Int[] | Int;
  colStart_lt?: Int;
  colStart_lte?: Int;
  colStart_gt?: Int;
  colStart_gte?: Int;
  colSpan?: Int;
  colSpan_not?: Int;
  colSpan_in?: Int[] | Int;
  colSpan_not_in?: Int[] | Int;
  colSpan_lt?: Int;
  colSpan_lte?: Int;
  colSpan_gt?: Int;
  colSpan_gte?: Int;
  content?: ContentWhereInput;
  viewer?: ViewerWhereInput;
  AND?: PaneWhereInput[] | PaneWhereInput;
  OR?: PaneWhereInput[] | PaneWhereInput;
  NOT?: PaneWhereInput[] | PaneWhereInput;
}

export interface UserCreateInput {
  name: String;
  viewer?: ViewerCreateOneInput;
}

export interface PaneUpdateManyMutationInput {
  rowStart?: Int;
  rowSpan?: Int;
  colStart?: Int;
  colSpan?: Int;
}

export interface ViewerUpsertWithoutActivePanesInput {
  update: ViewerUpdateWithoutActivePanesDataInput;
  create: ViewerCreateWithoutActivePanesInput;
}

export interface ViewerUpdateWithoutActivePanesDataInput {
  name?: String;
  rowCount?: Int;
  colCount?: Int;
}

export interface ViewerUpsertNestedInput {
  update: ViewerUpdateDataInput;
  create: ViewerCreateInput;
}

export interface PaneSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PaneWhereInput;
  AND?: PaneSubscriptionWhereInput[] | PaneSubscriptionWhereInput;
  OR?: PaneSubscriptionWhereInput[] | PaneSubscriptionWhereInput;
  NOT?: PaneSubscriptionWhereInput[] | PaneSubscriptionWhereInput;
}

export interface PaneUpdateWithoutViewerDataInput {
  rowStart?: Int;
  rowSpan?: Int;
  colStart?: Int;
  colSpan?: Int;
  content?: ContentUpdateOneInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  viewer?: ViewerWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ViewerPreviousValues {
  id: ID_Output;
  name: String;
  rowCount: Int;
  colCount: Int;
}

export interface ViewerPreviousValuesPromise
  extends Promise<ViewerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rowCount: () => Promise<Int>;
  colCount: () => Promise<Int>;
}

export interface ViewerPreviousValuesSubscription
  extends Promise<AsyncIterator<ViewerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  rowCount: () => Promise<AsyncIterator<Int>>;
  colCount: () => Promise<AsyncIterator<Int>>;
}

export interface ContentConnection {
  pageInfo: PageInfo;
  edges: ContentEdge[];
}

export interface ContentConnectionPromise
  extends Promise<ContentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContentEdge>>() => T;
  aggregate: <T = AggregateContentPromise>() => T;
}

export interface ContentConnectionSubscription
  extends Promise<AsyncIterator<ContentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PaneConnection {
  pageInfo: PageInfo;
  edges: PaneEdge[];
}

export interface PaneConnectionPromise
  extends Promise<PaneConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaneEdge>>() => T;
  aggregate: <T = AggregatePanePromise>() => T;
}

export interface PaneConnectionSubscription
  extends Promise<AsyncIterator<PaneConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaneEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaneSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ViewerSubscriptionPayload {
  mutation: MutationType;
  node: Viewer;
  updatedFields: String[];
  previousValues: ViewerPreviousValues;
}

export interface ViewerSubscriptionPayloadPromise
  extends Promise<ViewerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ViewerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ViewerPreviousValuesPromise>() => T;
}

export interface ViewerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ViewerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ViewerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ViewerPreviousValuesSubscription>() => T;
}

export interface Viewer {
  id: ID_Output;
  name: String;
  rowCount: Int;
  colCount: Int;
}

export interface ViewerPromise extends Promise<Viewer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  rowCount: () => Promise<Int>;
  colCount: () => Promise<Int>;
  activePanes: <T = FragmentableArray<Pane>>(
    args?: {
      where?: PaneWhereInput;
      orderBy?: PaneOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ViewerSubscription
  extends Promise<AsyncIterator<Viewer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  rowCount: () => Promise<AsyncIterator<Int>>;
  colCount: () => Promise<AsyncIterator<Int>>;
  activePanes: <T = Promise<AsyncIterator<PaneSubscription>>>(
    args?: {
      where?: PaneWhereInput;
      orderBy?: PaneOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ViewerEdge {
  node: Viewer;
  cursor: String;
}

export interface ViewerEdgePromise extends Promise<ViewerEdge>, Fragmentable {
  node: <T = ViewerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ViewerEdgeSubscription
  extends Promise<AsyncIterator<ViewerEdge>>,
    Fragmentable {
  node: <T = ViewerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Pane {
  id: ID_Output;
  rowStart: Int;
  rowSpan: Int;
  colStart: Int;
  colSpan: Int;
}

export interface PanePromise extends Promise<Pane>, Fragmentable {
  id: () => Promise<ID_Output>;
  rowStart: () => Promise<Int>;
  rowSpan: () => Promise<Int>;
  colStart: () => Promise<Int>;
  colSpan: () => Promise<Int>;
  content: <T = ContentPromise>() => T;
  viewer: <T = ViewerPromise>() => T;
}

export interface PaneSubscription
  extends Promise<AsyncIterator<Pane>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rowStart: () => Promise<AsyncIterator<Int>>;
  rowSpan: () => Promise<AsyncIterator<Int>>;
  colStart: () => Promise<AsyncIterator<Int>>;
  colSpan: () => Promise<AsyncIterator<Int>>;
  content: <T = ContentSubscription>() => T;
  viewer: <T = ViewerSubscription>() => T;
}

export interface Content {
  id: ID_Output;
  title: String;
  url?: String;
}

export interface ContentPromise extends Promise<Content>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ContentSubscription
  extends Promise<AsyncIterator<Content>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContentSubscriptionPayload {
  mutation: MutationType;
  node: Content;
  updatedFields: String[];
  previousValues: ContentPreviousValues;
}

export interface ContentSubscriptionPayloadPromise
  extends Promise<ContentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContentPreviousValuesPromise>() => T;
}

export interface ContentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContentPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  viewer: <T = ViewerPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  viewer: <T = ViewerSubscription>() => T;
}

export interface ContentPreviousValues {
  id: ID_Output;
  title: String;
  url?: String;
}

export interface ContentPreviousValuesPromise
  extends Promise<ContentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ContentPreviousValuesSubscription
  extends Promise<AsyncIterator<ContentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface PaneEdge {
  node: Pane;
  cursor: String;
}

export interface PaneEdgePromise extends Promise<PaneEdge>, Fragmentable {
  node: <T = PanePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaneEdgeSubscription
  extends Promise<AsyncIterator<PaneEdge>>,
    Fragmentable {
  node: <T = PaneSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ViewerConnection {
  pageInfo: PageInfo;
  edges: ViewerEdge[];
}

export interface ViewerConnectionPromise
  extends Promise<ViewerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ViewerEdge>>() => T;
  aggregate: <T = AggregateViewerPromise>() => T;
}

export interface ViewerConnectionSubscription
  extends Promise<AsyncIterator<ViewerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ViewerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateViewerSubscription>() => T;
}

export interface ContentEdge {
  node: Content;
  cursor: String;
}

export interface ContentEdgePromise extends Promise<ContentEdge>, Fragmentable {
  node: <T = ContentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContentEdgeSubscription
  extends Promise<AsyncIterator<ContentEdge>>,
    Fragmentable {
  node: <T = ContentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PanePreviousValues {
  id: ID_Output;
  rowStart: Int;
  rowSpan: Int;
  colStart: Int;
  colSpan: Int;
}

export interface PanePreviousValuesPromise
  extends Promise<PanePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rowStart: () => Promise<Int>;
  rowSpan: () => Promise<Int>;
  colStart: () => Promise<Int>;
  colSpan: () => Promise<Int>;
}

export interface PanePreviousValuesSubscription
  extends Promise<AsyncIterator<PanePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rowStart: () => Promise<AsyncIterator<Int>>;
  rowSpan: () => Promise<AsyncIterator<Int>>;
  colStart: () => Promise<AsyncIterator<Int>>;
  colSpan: () => Promise<AsyncIterator<Int>>;
}

export interface PaneSubscriptionPayload {
  mutation: MutationType;
  node: Pane;
  updatedFields: String[];
  previousValues: PanePreviousValues;
}

export interface PaneSubscriptionPayloadPromise
  extends Promise<PaneSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PanePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PanePreviousValuesPromise>() => T;
}

export interface PaneSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaneSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaneSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PanePreviousValuesSubscription>() => T;
}

export interface AggregateContent {
  count: Int;
}

export interface AggregateContentPromise
  extends Promise<AggregateContent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContentSubscription
  extends Promise<AsyncIterator<AggregateContent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateViewer {
  count: Int;
}

export interface AggregateViewerPromise
  extends Promise<AggregateViewer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateViewerSubscription
  extends Promise<AsyncIterator<AggregateViewer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregatePane {
  count: Int;
}

export interface AggregatePanePromise
  extends Promise<AggregatePane>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaneSubscription
  extends Promise<AsyncIterator<AggregatePane>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Viewer",
    embedded: false
  },
  {
    name: "Pane",
    embedded: false
  },
  {
    name: "Content",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
