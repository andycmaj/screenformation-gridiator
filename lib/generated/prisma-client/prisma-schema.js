module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateContent {
  count: Int!
}

type AggregatePane {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateViewer {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Content {
  id: ID!
  title: String!
  url: String
}

type ContentConnection {
  pageInfo: PageInfo!
  edges: [ContentEdge]!
  aggregate: AggregateContent!
}

input ContentCreateInput {
  title: String!
  url: String
}

input ContentCreateOneInput {
  create: ContentCreateInput
  connect: ContentWhereUniqueInput
}

type ContentEdge {
  node: Content!
  cursor: String!
}

enum ContentOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContentPreviousValues {
  id: ID!
  title: String!
  url: String
}

type ContentSubscriptionPayload {
  mutation: MutationType!
  node: Content
  updatedFields: [String!]
  previousValues: ContentPreviousValues
}

input ContentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContentWhereInput
  AND: [ContentSubscriptionWhereInput!]
  OR: [ContentSubscriptionWhereInput!]
  NOT: [ContentSubscriptionWhereInput!]
}

input ContentUpdateDataInput {
  title: String
  url: String
}

input ContentUpdateInput {
  title: String
  url: String
}

input ContentUpdateManyMutationInput {
  title: String
  url: String
}

input ContentUpdateOneInput {
  create: ContentCreateInput
  update: ContentUpdateDataInput
  upsert: ContentUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ContentWhereUniqueInput
}

input ContentUpsertNestedInput {
  update: ContentUpdateDataInput!
  create: ContentCreateInput!
}

input ContentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
}

input ContentWhereUniqueInput {
  id: ID
  title: String
}

scalar Long

type Mutation {
  createContent(data: ContentCreateInput!): Content!
  updateContent(data: ContentUpdateInput!, where: ContentWhereUniqueInput!): Content
  updateManyContents(data: ContentUpdateManyMutationInput!, where: ContentWhereInput): BatchPayload!
  upsertContent(where: ContentWhereUniqueInput!, create: ContentCreateInput!, update: ContentUpdateInput!): Content!
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteManyContents(where: ContentWhereInput): BatchPayload!
  createPane(data: PaneCreateInput!): Pane!
  updatePane(data: PaneUpdateInput!, where: PaneWhereUniqueInput!): Pane
  updateManyPanes(data: PaneUpdateManyMutationInput!, where: PaneWhereInput): BatchPayload!
  upsertPane(where: PaneWhereUniqueInput!, create: PaneCreateInput!, update: PaneUpdateInput!): Pane!
  deletePane(where: PaneWhereUniqueInput!): Pane
  deleteManyPanes(where: PaneWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createViewer(data: ViewerCreateInput!): Viewer!
  updateViewer(data: ViewerUpdateInput!, where: ViewerWhereUniqueInput!): Viewer
  updateManyViewers(data: ViewerUpdateManyMutationInput!, where: ViewerWhereInput): BatchPayload!
  upsertViewer(where: ViewerWhereUniqueInput!, create: ViewerCreateInput!, update: ViewerUpdateInput!): Viewer!
  deleteViewer(where: ViewerWhereUniqueInput!): Viewer
  deleteManyViewers(where: ViewerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pane {
  id: ID!
  rowStart: Int!
  rowSpan: Int!
  colStart: Int!
  colSpan: Int!
  content: Content
  viewer: Viewer!
}

type PaneConnection {
  pageInfo: PageInfo!
  edges: [PaneEdge]!
  aggregate: AggregatePane!
}

input PaneCreateInput {
  rowStart: Int!
  rowSpan: Int!
  colStart: Int!
  colSpan: Int!
  content: ContentCreateOneInput
  viewer: ViewerCreateOneWithoutActivePanesInput!
}

input PaneCreateManyWithoutViewerInput {
  create: [PaneCreateWithoutViewerInput!]
  connect: [PaneWhereUniqueInput!]
}

input PaneCreateWithoutViewerInput {
  rowStart: Int!
  rowSpan: Int!
  colStart: Int!
  colSpan: Int!
  content: ContentCreateOneInput
}

type PaneEdge {
  node: Pane!
  cursor: String!
}

enum PaneOrderByInput {
  id_ASC
  id_DESC
  rowStart_ASC
  rowStart_DESC
  rowSpan_ASC
  rowSpan_DESC
  colStart_ASC
  colStart_DESC
  colSpan_ASC
  colSpan_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PanePreviousValues {
  id: ID!
  rowStart: Int!
  rowSpan: Int!
  colStart: Int!
  colSpan: Int!
}

input PaneScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rowStart: Int
  rowStart_not: Int
  rowStart_in: [Int!]
  rowStart_not_in: [Int!]
  rowStart_lt: Int
  rowStart_lte: Int
  rowStart_gt: Int
  rowStart_gte: Int
  rowSpan: Int
  rowSpan_not: Int
  rowSpan_in: [Int!]
  rowSpan_not_in: [Int!]
  rowSpan_lt: Int
  rowSpan_lte: Int
  rowSpan_gt: Int
  rowSpan_gte: Int
  colStart: Int
  colStart_not: Int
  colStart_in: [Int!]
  colStart_not_in: [Int!]
  colStart_lt: Int
  colStart_lte: Int
  colStart_gt: Int
  colStart_gte: Int
  colSpan: Int
  colSpan_not: Int
  colSpan_in: [Int!]
  colSpan_not_in: [Int!]
  colSpan_lt: Int
  colSpan_lte: Int
  colSpan_gt: Int
  colSpan_gte: Int
  AND: [PaneScalarWhereInput!]
  OR: [PaneScalarWhereInput!]
  NOT: [PaneScalarWhereInput!]
}

type PaneSubscriptionPayload {
  mutation: MutationType!
  node: Pane
  updatedFields: [String!]
  previousValues: PanePreviousValues
}

input PaneSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaneWhereInput
  AND: [PaneSubscriptionWhereInput!]
  OR: [PaneSubscriptionWhereInput!]
  NOT: [PaneSubscriptionWhereInput!]
}

input PaneUpdateInput {
  rowStart: Int
  rowSpan: Int
  colStart: Int
  colSpan: Int
  content: ContentUpdateOneInput
  viewer: ViewerUpdateOneRequiredWithoutActivePanesInput
}

input PaneUpdateManyDataInput {
  rowStart: Int
  rowSpan: Int
  colStart: Int
  colSpan: Int
}

input PaneUpdateManyMutationInput {
  rowStart: Int
  rowSpan: Int
  colStart: Int
  colSpan: Int
}

input PaneUpdateManyWithoutViewerInput {
  create: [PaneCreateWithoutViewerInput!]
  delete: [PaneWhereUniqueInput!]
  connect: [PaneWhereUniqueInput!]
  set: [PaneWhereUniqueInput!]
  disconnect: [PaneWhereUniqueInput!]
  update: [PaneUpdateWithWhereUniqueWithoutViewerInput!]
  upsert: [PaneUpsertWithWhereUniqueWithoutViewerInput!]
  deleteMany: [PaneScalarWhereInput!]
  updateMany: [PaneUpdateManyWithWhereNestedInput!]
}

input PaneUpdateManyWithWhereNestedInput {
  where: PaneScalarWhereInput!
  data: PaneUpdateManyDataInput!
}

input PaneUpdateWithoutViewerDataInput {
  rowStart: Int
  rowSpan: Int
  colStart: Int
  colSpan: Int
  content: ContentUpdateOneInput
}

input PaneUpdateWithWhereUniqueWithoutViewerInput {
  where: PaneWhereUniqueInput!
  data: PaneUpdateWithoutViewerDataInput!
}

input PaneUpsertWithWhereUniqueWithoutViewerInput {
  where: PaneWhereUniqueInput!
  update: PaneUpdateWithoutViewerDataInput!
  create: PaneCreateWithoutViewerInput!
}

input PaneWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rowStart: Int
  rowStart_not: Int
  rowStart_in: [Int!]
  rowStart_not_in: [Int!]
  rowStart_lt: Int
  rowStart_lte: Int
  rowStart_gt: Int
  rowStart_gte: Int
  rowSpan: Int
  rowSpan_not: Int
  rowSpan_in: [Int!]
  rowSpan_not_in: [Int!]
  rowSpan_lt: Int
  rowSpan_lte: Int
  rowSpan_gt: Int
  rowSpan_gte: Int
  colStart: Int
  colStart_not: Int
  colStart_in: [Int!]
  colStart_not_in: [Int!]
  colStart_lt: Int
  colStart_lte: Int
  colStart_gt: Int
  colStart_gte: Int
  colSpan: Int
  colSpan_not: Int
  colSpan_in: [Int!]
  colSpan_not_in: [Int!]
  colSpan_lt: Int
  colSpan_lte: Int
  colSpan_gt: Int
  colSpan_gte: Int
  content: ContentWhereInput
  viewer: ViewerWhereInput
  AND: [PaneWhereInput!]
  OR: [PaneWhereInput!]
  NOT: [PaneWhereInput!]
}

input PaneWhereUniqueInput {
  id: ID
}

type Query {
  content(where: ContentWhereUniqueInput!): Content
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content]!
  contentsConnection(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContentConnection!
  pane(where: PaneWhereUniqueInput!): Pane
  panes(where: PaneWhereInput, orderBy: PaneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pane]!
  panesConnection(where: PaneWhereInput, orderBy: PaneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaneConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  viewer(where: ViewerWhereUniqueInput!): Viewer
  viewers(where: ViewerWhereInput, orderBy: ViewerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Viewer]!
  viewersConnection(where: ViewerWhereInput, orderBy: ViewerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ViewerConnection!
  node(id: ID!): Node
}

type Subscription {
  content(where: ContentSubscriptionWhereInput): ContentSubscriptionPayload
  pane(where: PaneSubscriptionWhereInput): PaneSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  viewer(where: ViewerSubscriptionWhereInput): ViewerSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  viewer: Viewer
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  viewer: ViewerCreateOneInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  viewer: ViewerUpdateOneInput
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  viewer: ViewerWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}

type Viewer {
  id: ID!
  name: String!
  rowCount: Int!
  colCount: Int!
  activePanes(where: PaneWhereInput, orderBy: PaneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pane!]
}

type ViewerConnection {
  pageInfo: PageInfo!
  edges: [ViewerEdge]!
  aggregate: AggregateViewer!
}

input ViewerCreateInput {
  name: String!
  rowCount: Int!
  colCount: Int!
  activePanes: PaneCreateManyWithoutViewerInput
}

input ViewerCreateOneInput {
  create: ViewerCreateInput
  connect: ViewerWhereUniqueInput
}

input ViewerCreateOneWithoutActivePanesInput {
  create: ViewerCreateWithoutActivePanesInput
  connect: ViewerWhereUniqueInput
}

input ViewerCreateWithoutActivePanesInput {
  name: String!
  rowCount: Int!
  colCount: Int!
}

type ViewerEdge {
  node: Viewer!
  cursor: String!
}

enum ViewerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rowCount_ASC
  rowCount_DESC
  colCount_ASC
  colCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ViewerPreviousValues {
  id: ID!
  name: String!
  rowCount: Int!
  colCount: Int!
}

type ViewerSubscriptionPayload {
  mutation: MutationType!
  node: Viewer
  updatedFields: [String!]
  previousValues: ViewerPreviousValues
}

input ViewerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ViewerWhereInput
  AND: [ViewerSubscriptionWhereInput!]
  OR: [ViewerSubscriptionWhereInput!]
  NOT: [ViewerSubscriptionWhereInput!]
}

input ViewerUpdateDataInput {
  name: String
  rowCount: Int
  colCount: Int
  activePanes: PaneUpdateManyWithoutViewerInput
}

input ViewerUpdateInput {
  name: String
  rowCount: Int
  colCount: Int
  activePanes: PaneUpdateManyWithoutViewerInput
}

input ViewerUpdateManyMutationInput {
  name: String
  rowCount: Int
  colCount: Int
}

input ViewerUpdateOneInput {
  create: ViewerCreateInput
  update: ViewerUpdateDataInput
  upsert: ViewerUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ViewerWhereUniqueInput
}

input ViewerUpdateOneRequiredWithoutActivePanesInput {
  create: ViewerCreateWithoutActivePanesInput
  update: ViewerUpdateWithoutActivePanesDataInput
  upsert: ViewerUpsertWithoutActivePanesInput
  connect: ViewerWhereUniqueInput
}

input ViewerUpdateWithoutActivePanesDataInput {
  name: String
  rowCount: Int
  colCount: Int
}

input ViewerUpsertNestedInput {
  update: ViewerUpdateDataInput!
  create: ViewerCreateInput!
}

input ViewerUpsertWithoutActivePanesInput {
  update: ViewerUpdateWithoutActivePanesDataInput!
  create: ViewerCreateWithoutActivePanesInput!
}

input ViewerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rowCount: Int
  rowCount_not: Int
  rowCount_in: [Int!]
  rowCount_not_in: [Int!]
  rowCount_lt: Int
  rowCount_lte: Int
  rowCount_gt: Int
  rowCount_gte: Int
  colCount: Int
  colCount_not: Int
  colCount_in: [Int!]
  colCount_not_in: [Int!]
  colCount_lt: Int
  colCount_lte: Int
  colCount_gt: Int
  colCount_gte: Int
  activePanes_every: PaneWhereInput
  activePanes_some: PaneWhereInput
  activePanes_none: PaneWhereInput
  AND: [ViewerWhereInput!]
  OR: [ViewerWhereInput!]
  NOT: [ViewerWhereInput!]
}

input ViewerWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    